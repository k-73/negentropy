<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Core/Main/Renderer.hpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Core/Main/Renderer.hpp" />
              <option name="originalContent" value="#pragma once&#10;&#10;#include &lt;SDL.h&gt;&#10;#include &lt;vector&gt;&#10;&#10;namespace Diagram {&#10;    struct Block;&#10;    struct Camera;&#10;}&#10;&#10;class Renderer {&#10;public:&#10;    Renderer() = default;&#10;    ~Renderer() = default;&#10;&#10;    Renderer(const Renderer&amp;) = delete;&#10;    Renderer&amp; operator=(const Renderer&amp;) = delete;&#10;    Renderer(Renderer&amp;&amp;) = delete;&#10;    Renderer&amp; operator=(Renderer&amp;&amp;) = delete;&#10;&#10;    [[nodiscard]] bool Initialize(SDL_Window* window) noexcept;&#10;    void Clear() noexcept;&#10;    void DrawGrid(const Diagram::Camera&amp; camera) noexcept;&#10;    void DrawBlocks(const std::vector&lt;Diagram::Block&gt;&amp; blocks, const Diagram::Camera&amp; camera) noexcept;&#10;    void Present() noexcept;&#10;    void Cleanup() noexcept;&#10;    &#10;    [[nodiscard]] SDL_Renderer* GetSDLRenderer() const noexcept;&#10;&#10;private:&#10;    SDL_Renderer* m_renderer = nullptr;&#10;};&#10;" />
              <option name="updatedContent" value="#pragma once&#10;&#10;#include &lt;SDL.h&gt;&#10;#include &lt;vector&gt;&#10;&#10;namespace Diagram {&#10;    struct Block;&#10;    struct Camera;&#10;}&#10;&#10;class Renderer {&#10;public:&#10;    Renderer() = default;&#10;    ~Renderer() = default;&#10;&#10;    Renderer(const Renderer&amp;) = delete;&#10;    Renderer&amp; operator=(const Renderer&amp;) = delete;&#10;    Renderer(Renderer&amp;&amp;) = delete;&#10;    Renderer&amp; operator=(Renderer&amp;&amp;) = delete;&#10;&#10;    [[nodiscard]] bool Initialize(SDL_Window* window) noexcept;&#10;    void Clear() noexcept;&#10;    void DrawGrid(const Diagram::Camera&amp; camera) noexcept;&#10;    void DrawBlocks(const std::vector&lt;Diagram::Block&gt;&amp; blocks, const Diagram::Camera&amp; camera) noexcept;&#10;    void Present() noexcept;&#10;    &#10;    [[nodiscard]] SDL_Renderer* GetSDLRenderer() const noexcept;&#10;&#10;private:&#10;    SDL_Renderer* m_renderer = nullptr;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/cmake-build-debug/_deps/glm-src/CMakeLists.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/cmake-build-debug/_deps/glm-src/CMakeLists.txt" />
              <option name="originalContent" value="cmake_minimum_required(VERSION 3.6 FATAL_ERROR)&#10;cmake_policy(VERSION 3.6)&#10;&#10;file(READ &quot;glm/detail/setup.hpp&quot; GLM_SETUP_FILE)&#10;string(REGEX MATCH &quot;#define[ ]+GLM_VERSION_MAJOR[ ]+([0-9]+)&quot; _ ${GLM_SETUP_FILE})&#10;set(GLM_VERSION_MAJOR &quot;${CMAKE_MATCH_1}&quot;)&#10;string(REGEX MATCH &quot;#define[ ]+GLM_VERSION_MINOR[ ]+([0-9]+)&quot; _ ${GLM_SETUP_FILE})&#10;set(GLM_VERSION_MINOR &quot;${CMAKE_MATCH_1}&quot;)&#10;string(REGEX MATCH &quot;#define[ ]+GLM_VERSION_PATCH[ ]+([0-9]+)&quot; _ ${GLM_SETUP_FILE})&#10;set(GLM_VERSION_PATCH &quot;${CMAKE_MATCH_1}&quot;)&#10;string(REGEX MATCH &quot;#define[ ]+GLM_VERSION_REVISION[ ]+([0-9]+)&quot; _ ${GLM_SETUP_FILE})&#10;set(GLM_VERSION_REVISION &quot;${CMAKE_MATCH_1}&quot;)&#10;&#10;set(GLM_VERSION ${GLM_VERSION_MAJOR}.${GLM_VERSION_MINOR}.${GLM_VERSION_PATCH})&#10;project(glm VERSION ${GLM_VERSION} LANGUAGES CXX)&#10;message(STATUS &quot;GLM: Version &quot; ${GLM_VERSION})&#10;&#10;set(GLM_IS_MASTER_PROJECT OFF)&#10;if (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})&#10;&#9;set(GLM_IS_MASTER_PROJECT ON)&#10;endif()&#10;&#10;option(GLM_BUILD_LIBRARY &quot;Build dynamic/static library&quot; ON)&#10;option(GLM_BUILD_TESTS &quot;Build the test programs&quot; ${GLM_IS_MASTER_PROJECT})&#10;option(GLM_BUILD_INSTALL &quot;Generate the install target&quot; ${GLM_IS_MASTER_PROJECT})&#10;&#10;include(GNUInstallDirs)&#10;&#10;option(GLM_ENABLE_CXX_98 &quot;Enable C++ 98&quot; OFF)&#10;option(GLM_ENABLE_CXX_11 &quot;Enable C++ 11&quot; OFF)&#10;option(GLM_ENABLE_CXX_14 &quot;Enable C++ 14&quot; OFF)&#10;option(GLM_ENABLE_CXX_17 &quot;Enable C++ 17&quot; OFF)&#10;option(GLM_ENABLE_CXX_20 &quot;Enable C++ 20&quot; OFF)&#10;&#10;set(CMAKE_CXX_STANDARD_REQUIRED ON)&#10;&#10;if(GLM_ENABLE_CXX_20)&#10;&#9;set(CMAKE_CXX_STANDARD 20)&#10;&#9;add_definitions(-DGLM_FORCE_CXX20)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++20 features&quot;)&#10;&#9;endif()&#10;&#10;elseif(GLM_ENABLE_CXX_17)&#10;&#9;set(CMAKE_CXX_STANDARD 17)&#10;&#9;add_definitions(-DGLM_FORCE_CXX17)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++17 features&quot;)&#10;&#9;endif()&#10;&#10;elseif(GLM_ENABLE_CXX_14)&#10;&#9;set(CMAKE_CXX_STANDARD 14)&#10;&#9;add_definitions(-DGLM_FORCE_CXX14)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++14 features&quot;)&#10;&#9;endif()&#10;&#10;elseif(GLM_ENABLE_CXX_11)&#10;&#9;set(CMAKE_CXX_STANDARD 11)&#10;&#9;add_definitions(-DGLM_FORCE_CXX11)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++11 features&quot;)&#10;&#9;endif()&#10;&#10;elseif(GLM_ENABLE_CXX_98)&#10;&#9;set(CMAKE_CXX_STANDARD 98)&#10;&#9;add_definitions(-DGLM_FORCE_CXX98)&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++98 features&quot;)&#10;&#9;endif()&#10;&#10;else()&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++ features auto detection&quot;)&#10;&#9;endif()&#10;&#10;endif()&#10;&#10;option(GLM_ENABLE_LANG_EXTENSIONS &quot;Enable language extensions&quot; OFF)&#10;option(GLM_DISABLE_AUTO_DETECTION &quot;Disable platform, compiler, arch and C++ language detection&quot; OFF)&#10;&#10;if(GLM_DISABLE_AUTO_DETECTION)&#10;&#9;add_definitions(-DGLM_FORCE_PLATFORM_UNKNOWN -DGLM_FORCE_COMPILER_UNKNOWN -DGLM_FORCE_ARCH_UNKNOWN -DGLM_FORCE_CXX_UNKNOWN)&#10;endif()&#10;&#10;if(GLM_ENABLE_LANG_EXTENSIONS)&#10;&#9;set(CMAKE_CXX_EXTENSIONS ON)&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;))&#10;&#9;&#9;add_compile_options(-fms-extensions)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: Build with C++ language extensions&quot;)&#10;else()&#10;&#9;set(CMAKE_CXX_EXTENSIONS OFF)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/Za)&#10;&#9;&#9;if(MSVC15)&#10;&#9;&#9;&#9;add_compile_options(/permissive-)&#10;&#9;&#9;endif()&#10;&#9;endif()&#10;endif()&#10;&#10;option(GLM_ENABLE_FAST_MATH &quot;Enable fast math optimizations&quot; OFF)&#10;if(GLM_ENABLE_FAST_MATH)&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with fast math optimizations&quot;)&#10;&#9;endif()&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;))&#10;&#9;&#9;add_compile_options(-ffast-math)&#10;&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/fp:fast)&#10;&#9;endif()&#10;else()&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/fp:precise)&#10;&#9;endif()&#10;endif()&#10;&#10;option(GLM_ENABLE_SIMD_SSE2 &quot;Enable SSE2 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_SSE3 &quot;Enable SSE3 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_SSSE3 &quot;Enable SSSE3 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_SSE4_1 &quot;Enable SSE 4.1 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_SSE4_2 &quot;Enable SSE 4.2 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_AVX &quot;Enable AVX optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_AVX2 &quot;Enable AVX2 optimizations&quot; OFF)&#10;option(GLM_FORCE_PURE &quot;Force 'pure' instructions&quot; OFF)&#10;&#10;if(GLM_FORCE_PURE)&#10;&#9;add_definitions(-DGLM_FORCE_PURE)&#10;&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;)&#10;&#9;&#9;add_compile_options(-mfpmath=387)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: No SIMD instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_AVX2)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-mavx2)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxAVX2)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/arch:AVX2)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: AVX2 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_AVX)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-mavx)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxAVX)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/arch:AVX)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: AVX instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSE4_2)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-msse4.2)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSE4.2)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2) # VC doesn't support SSE4.2&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSE4.2 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSE4_1)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-msse4.1)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSE4.1)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2) # VC doesn't support SSE4.1&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSE4.1 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSSE3)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-mssse3)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSSE3)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2) # VC doesn't support SSSE3&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSSE3 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSE3)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-msse3)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSE3)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2) # VC doesn't support SSE3&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSE3 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSE2)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-msse2)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSE2)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSE2 instruction set&quot;)&#10;endif()&#10;&#10;add_subdirectory(glm)&#10;&#10;if (GLM_BUILD_TESTS)&#10;&#9;include(CTest)&#10;&#9;add_subdirectory(test)&#10;endif()&#10;&#10;if (GLM_BUILD_INSTALL)&#10;&#9;include(CPack)&#10;&#10;&#9;install(TARGETS glm-header-only glm EXPORT glm)&#10;&#9;install(&#10;&#9;&#9;DIRECTORY glm&#10;&#9;&#9;DESTINATION &quot;${CMAKE_INSTALL_INCLUDEDIR}&quot;&#10;&#9;&#9;PATTERN &quot;CMakeLists.txt&quot; EXCLUDE&#10;&#9;)&#10;&#9;install(&#10;&#9;&#9;EXPORT glm&#10;&#9;&#9;NAMESPACE glm::&#10;&#9;&#9;DESTINATION &quot;${CMAKE_INSTALL_DATAROOTDIR}/glm&quot;&#10;&#9;&#9;FILE glmConfig.cmake&#10;&#9;)&#10;&#9;include(CMakePackageConfigHelpers)&#10;&#9;write_basic_package_version_file(&#10;&#9;&#9;&quot;${CMAKE_CURRENT_BINARY_DIR}/glmConfigVersion.cmake&quot;&#10;&#9;&#9;COMPATIBILITY AnyNewerVersion&#10;&#9;)&#10;&#9;install(&#10;&#9;&#9;FILES &quot;${CMAKE_CURRENT_BINARY_DIR}/glmConfigVersion.cmake&quot;&#10;&#9;&#9;DESTINATION &quot;${CMAKE_INSTALL_DATAROOTDIR}/glm&quot;&#10;&#9;)&#10;&#10;&#9;configure_file(&#10;&#9;&#9;&quot;${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in&quot;&#10;&#9;&#9;&quot;${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake&quot;&#10;&#9;&#9;IMMEDIATE @ONLY&#10;&#9;)&#10;&#10;&#9;add_custom_target(&#10;&#9;&#9;uninstall&#10;&#9;&#9;&quot;${CMAKE_COMMAND}&quot; -P&#10;&#9;&#9;&quot;${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake&quot;&#10;&#9;)&#10;endif()&#10;" />
              <option name="updatedContent" value="cmake_minimum_required(VERSION 3.10 FATAL_ERROR)&#10;cmake_policy(VERSION 3.10)&#10;&#10;file(READ &quot;glm/detail/setup.hpp&quot; GLM_SETUP_FILE)&#10;string(REGEX MATCH &quot;#define[ ]+GLM_VERSION_MAJOR[ ]+([0-9]+)&quot; _ ${GLM_SETUP_FILE})&#10;set(GLM_VERSION_MAJOR &quot;${CMAKE_MATCH_1}&quot;)&#10;string(REGEX MATCH &quot;#define[ ]+GLM_VERSION_MINOR[ ]+([0-9]+)&quot; _ ${GLM_SETUP_FILE})&#10;set(GLM_VERSION_MINOR &quot;${CMAKE_MATCH_1}&quot;)&#10;string(REGEX MATCH &quot;#define[ ]+GLM_VERSION_PATCH[ ]+([0-9]+)&quot; _ ${GLM_SETUP_FILE})&#10;set(GLM_VERSION_PATCH &quot;${CMAKE_MATCH_1}&quot;)&#10;string(REGEX MATCH &quot;#define[ ]+GLM_VERSION_REVISION[ ]+([0-9]+)&quot; _ ${GLM_SETUP_FILE})&#10;set(GLM_VERSION_REVISION &quot;${CMAKE_MATCH_1}&quot;)&#10;&#10;set(GLM_VERSION ${GLM_VERSION_MAJOR}.${GLM_VERSION_MINOR}.${GLM_VERSION_PATCH})&#10;project(glm VERSION ${GLM_VERSION} LANGUAGES CXX)&#10;message(STATUS &quot;GLM: Version &quot; ${GLM_VERSION})&#10;&#10;set(GLM_IS_MASTER_PROJECT OFF)&#10;if (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})&#10;&#9;set(GLM_IS_MASTER_PROJECT ON)&#10;endif()&#10;&#10;option(GLM_BUILD_LIBRARY &quot;Build dynamic/static library&quot; ON)&#10;option(GLM_BUILD_TESTS &quot;Build the test programs&quot; ${GLM_IS_MASTER_PROJECT})&#10;option(GLM_BUILD_INSTALL &quot;Generate the install target&quot; ${GLM_IS_MASTER_PROJECT})&#10;&#10;include(GNUInstallDirs)&#10;&#10;option(GLM_ENABLE_CXX_98 &quot;Enable C++ 98&quot; OFF)&#10;option(GLM_ENABLE_CXX_11 &quot;Enable C++ 11&quot; OFF)&#10;option(GLM_ENABLE_CXX_14 &quot;Enable C++ 14&quot; OFF)&#10;option(GLM_ENABLE_CXX_17 &quot;Enable C++ 17&quot; OFF)&#10;option(GLM_ENABLE_CXX_20 &quot;Enable C++ 20&quot; OFF)&#10;&#10;set(CMAKE_CXX_STANDARD_REQUIRED ON)&#10;&#10;if(GLM_ENABLE_CXX_20)&#10;&#9;set(CMAKE_CXX_STANDARD 20)&#10;&#9;add_definitions(-DGLM_FORCE_CXX20)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++20 features&quot;)&#10;&#9;endif()&#10;&#10;elseif(GLM_ENABLE_CXX_17)&#10;&#9;set(CMAKE_CXX_STANDARD 17)&#10;&#9;add_definitions(-DGLM_FORCE_CXX17)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++17 features&quot;)&#10;&#9;endif()&#10;&#10;elseif(GLM_ENABLE_CXX_14)&#10;&#9;set(CMAKE_CXX_STANDARD 14)&#10;&#9;add_definitions(-DGLM_FORCE_CXX14)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++14 features&quot;)&#10;&#9;endif()&#10;&#10;elseif(GLM_ENABLE_CXX_11)&#10;&#9;set(CMAKE_CXX_STANDARD 11)&#10;&#9;add_definitions(-DGLM_FORCE_CXX11)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++11 features&quot;)&#10;&#9;endif()&#10;&#10;elseif(GLM_ENABLE_CXX_98)&#10;&#9;set(CMAKE_CXX_STANDARD 98)&#10;&#9;add_definitions(-DGLM_FORCE_CXX98)&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++98 features&quot;)&#10;&#9;endif()&#10;&#10;else()&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)&#10;&#9;&#9;message(STATUS &quot;GLM: Disable -Wc++98-compat warnings&quot;)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat)&#10;&#9;&#9;add_compile_options(-Wno-c++98-compat-pedantic)&#10;&#9;endif()&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with C++ features auto detection&quot;)&#10;&#9;endif()&#10;&#10;endif()&#10;&#10;option(GLM_ENABLE_LANG_EXTENSIONS &quot;Enable language extensions&quot; OFF)&#10;option(GLM_DISABLE_AUTO_DETECTION &quot;Disable platform, compiler, arch and C++ language detection&quot; OFF)&#10;&#10;if(GLM_DISABLE_AUTO_DETECTION)&#10;&#9;add_definitions(-DGLM_FORCE_PLATFORM_UNKNOWN -DGLM_FORCE_COMPILER_UNKNOWN -DGLM_FORCE_ARCH_UNKNOWN -DGLM_FORCE_CXX_UNKNOWN)&#10;endif()&#10;&#10;if(GLM_ENABLE_LANG_EXTENSIONS)&#10;&#9;set(CMAKE_CXX_EXTENSIONS ON)&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;))&#10;&#9;&#9;add_compile_options(-fms-extensions)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: Build with C++ language extensions&quot;)&#10;else()&#10;&#9;set(CMAKE_CXX_EXTENSIONS OFF)&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/Za)&#10;&#9;&#9;if(MSVC15)&#10;&#9;&#9;&#9;add_compile_options(/permissive-)&#10;&#9;&#9;endif()&#10;&#9;endif()&#10;endif()&#10;&#10;option(GLM_ENABLE_FAST_MATH &quot;Enable fast math optimizations&quot; OFF)&#10;if(GLM_ENABLE_FAST_MATH)&#10;&#9;if(NOT GLM_QUIET)&#10;&#9;&#9;message(STATUS &quot;GLM: Build with fast math optimizations&quot;)&#10;&#9;endif()&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;))&#10;&#9;&#9;add_compile_options(-ffast-math)&#10;&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/fp:fast)&#10;&#9;endif()&#10;else()&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/fp:precise)&#10;&#9;endif()&#10;endif()&#10;&#10;option(GLM_ENABLE_SIMD_SSE2 &quot;Enable SSE2 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_SSE3 &quot;Enable SSE3 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_SSSE3 &quot;Enable SSSE3 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_SSE4_1 &quot;Enable SSE 4.1 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_SSE4_2 &quot;Enable SSE 4.2 optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_AVX &quot;Enable AVX optimizations&quot; OFF)&#10;option(GLM_ENABLE_SIMD_AVX2 &quot;Enable AVX2 optimizations&quot; OFF)&#10;option(GLM_FORCE_PURE &quot;Force 'pure' instructions&quot; OFF)&#10;&#10;if(GLM_FORCE_PURE)&#10;&#9;add_definitions(-DGLM_FORCE_PURE)&#10;&#10;&#9;if(CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;)&#10;&#9;&#9;add_compile_options(-mfpmath=387)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: No SIMD instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_AVX2)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-mavx2)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxAVX2)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/arch:AVX2)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: AVX2 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_AVX)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-mavx)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxAVX)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;)&#10;&#9;&#9;add_compile_options(/arch:AVX)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: AVX instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSE4_2)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-msse4.2)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSE4.2)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2) # VC doesn't support SSE4.2&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSE4.2 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSE4_1)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-msse4.1)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSE4.1)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2) # VC doesn't support SSE4.1&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSE4.1 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSSE3)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-mssse3)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSSE3)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2) # VC doesn't support SSSE3&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSSE3 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSE3)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-msse3)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSE3)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2) # VC doesn't support SSE3&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSE3 instruction set&quot;)&#10;&#10;elseif(GLM_ENABLE_SIMD_SSE2)&#10;&#9;add_definitions(-DGLM_FORCE_INTRINSICS)&#10;&#10;&#9;if((CMAKE_CXX_COMPILER_ID MATCHES &quot;GNU&quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;))&#10;&#9;&#9;add_compile_options(-msse2)&#10;&#9;elseif(CMAKE_CXX_COMPILER_ID MATCHES &quot;Intel&quot;)&#10;&#9;&#9;add_compile_options(/QxSSE2)&#10;&#9;elseif((CMAKE_CXX_COMPILER_ID MATCHES &quot;MSVC&quot;) AND NOT CMAKE_CL_64)&#10;&#9;&#9;add_compile_options(/arch:SSE2)&#10;&#9;endif()&#10;&#9;message(STATUS &quot;GLM: SSE2 instruction set&quot;)&#10;endif()&#10;&#10;add_subdirectory(glm)&#10;&#10;if (GLM_BUILD_TESTS)&#10;&#9;include(CTest)&#10;&#9;add_subdirectory(test)&#10;endif()&#10;&#10;if (GLM_BUILD_INSTALL)&#10;&#9;include(CPack)&#10;&#10;&#9;install(TARGETS glm-header-only glm EXPORT glm)&#10;&#9;install(&#10;&#9;&#9;DIRECTORY glm&#10;&#9;&#9;DESTINATION &quot;${CMAKE_INSTALL_INCLUDEDIR}&quot;&#10;&#9;&#9;PATTERN &quot;CMakeLists.txt&quot; EXCLUDE&#10;&#9;)&#10;&#9;install(&#10;&#9;&#9;EXPORT glm&#10;&#9;&#9;NAMESPACE glm::&#10;&#9;&#9;DESTINATION &quot;${CMAKE_INSTALL_DATAROOTDIR}/glm&quot;&#10;&#9;&#9;FILE glmConfig.cmake&#10;&#9;)&#10;&#9;include(CMakePackageConfigHelpers)&#10;&#9;write_basic_package_version_file(&#10;&#9;&#9;&quot;${CMAKE_CURRENT_BINARY_DIR}/glmConfigVersion.cmake&quot;&#10;&#9;&#9;COMPATIBILITY AnyNewerVersion&#10;&#9;)&#10;&#9;install(&#10;&#9;&#9;FILES &quot;${CMAKE_CURRENT_BINARY_DIR}/glmConfigVersion.cmake&quot;&#10;&#9;&#9;DESTINATION &quot;${CMAKE_INSTALL_DATAROOTDIR}/glm&quot;&#10;&#9;)&#10;&#10;&#9;configure_file(&#10;&#9;&#9;&quot;${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in&quot;&#10;&#9;&#9;&quot;${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake&quot;&#10;&#9;&#9;IMMEDIATE @ONLY&#10;&#9;)&#10;&#10;&#9;add_custom_target(&#10;&#9;&#9;uninstall&#10;&#9;&#9;&quot;${CMAKE_COMMAND}&quot; -P&#10;&#9;&#9;&quot;${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake&quot;&#10;&#9;)&#10;endif()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>